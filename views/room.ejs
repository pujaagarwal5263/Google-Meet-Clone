<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Document</title>
    <script>
      const ROOM_ID = "<%= roomId %>";
      const username = "<%= username %>";
    </script>
    <script src="https://unpkg.com/peerjs@1.2.0/dist/peerjs.min.js"></script>
    <script src="/socket.io/socket.io.js"></script>
    <script src="script.js"></script>
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/bootstrap@4.4.1/dist/css/bootstrap.min.css"
      integrity="sha384-Vkoo8x4CGsO3+Hhxv8T/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh"
      crossorigin="anonymous"
    />
  </head>
  <style>
    span{
      font-weight: bolder;
      font-style: italic;
    }
    #video-grid {
      display: grid;
      grid-template-columns: repeat(auto-fill, 300px);
      grid-auto-rows: 300px;
      justify-content: space-around;
    }

    video {
      width: 100%;
      height: 100%;
      object-fit: cover;
    }
  </style>
  <body class="mx-3">
    <h2><%= username %></h2>
    <div class="row">
    <div class="col-8">
    <div id="video-grid"></div>
    <br />
    <footer class="page-footer">
    <div class="row my-2">
    <button id="audio" onclick="muteAudiio()" class="btn btn-primary mx-2">
      Mute audio
    </button>
    <button id="video" onclick="muteVideo()" class="btn btn-primary mx-2">
      Mute video
    </button>

      <button onclick="leaveMeet()" class="btn btn-danger mx-2">
        Leave meeting
      </button>
      <form action="/logout" method="get">
        <button onclick="logout()" class="btn btn-danger mx-2">Logout</button>
      </form>   
   </div>
  </footer>
  </div>
    <br />
  <div class="jumbotron">
    <div>
      <h3>Chat-Box</h3>
      <input type="text" name="message" id="message" />
      <button type="submit" onclick="sendMessage()" class="btn btn-success">
        Send
      </button>
    </div>
    <ul id="msg" style="list-style-type: none"></ul>
   </div>
  </div>
    <script>
      const socket = io("/");
      const videoGrid = document.getElementById("video-grid");
      const myPeer = new Peer();
      const myVideo = document.createElement("video");
      myVideo.muted = true;
      const peers = {};
      let localstream;

      navigator.mediaDevices
        .getUserMedia({
          video: true,
          audio: true,
        })
        .then((stream) => {
          localstream = stream;
          addVideoStream(myVideo, stream);

          myPeer.on("call", (call) => {
            call.answer(stream);
            const video = document.createElement("video");
            call.on("stream", (userVideoStream) => {
              addVideoStream(video, userVideoStream);
            });
          });

          socket.on("user-connected", (userId) => {
            connectToNewUser(userId, stream);
          });

          socket.on("show-to-room", (message, username) => {
            //var msgContent=document.getElementById("message").value;
            items.push({ username: username, message: message });
            let listItems = "";
            for (let i = 0; i < items.length; i++) {
              listItems +=
                "<li>" + "<span>"+ items[i].username + "</span>" + ": " + items[i].message + "</li>";
            }
            document.getElementById("msg").innerHTML = listItems;
            document.getElementById("message").value = "";
          });
        });

      socket.on("user-disconnected", (userId) => {
        if (peers[userId]) {
          peers[userId].close();
        }
      });

      myPeer.on("open", (id) => {
        socket.emit("join-room", ROOM_ID, id);
      });

      let items = [];
      function sendMessage() {
        var msgContent = document.getElementById("message").value;
        //console.log(localStorage.getItem(user));
        socket.emit("send-chat", msgContent, username);
      }

      function connectToNewUser(userId, stream) {
        const call = myPeer.call(userId, stream);
        const video = document.createElement("video");
        call.on("stream", (userVideoStream) => {
          addVideoStream(video, userVideoStream);
        });
        call.on("close", () => {
          video.remove();
        });

        peers[userId] = call;
      }

      function addVideoStream(video, stream) {
        video.srcObject = stream;
        video.addEventListener("loadedmetadata", () => {
          video.play();
        });
        videoGrid.append(video);
      }

      let isAudio = true;
      function muteAudiio() {
        isAudio = !isAudio;
        localstream.getAudioTracks()[0].enabled = isAudio;
        if (!isAudio) {
          document.getElementById("audio").textContent = "Unmute Audio";
        } else {
          document.getElementById("audio").textContent = "Mute Audio";
        }
      }

      let isVideo = true;
      function muteVideo() {
        isVideo = !isVideo;
        localstream.getVideoTracks()[0].enabled = isVideo;
        if (!isVideo) {
          document.getElementById("video").textContent = "Unmute Video";
        } else {
          document.getElementById("video").textContent = "Mute Video";
        }
      }

      function leaveMeet() {
        let text = "Do you want to leave meeting?";
        if (confirm(text) == true) {
          window.history.back();
          //window.close();
        }
      }
    </script>
  </body>
</html>
